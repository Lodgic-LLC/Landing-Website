server {
    server_name lodgic-dev.com www.lodgic-dev.com;
    
    # Chemins des fichiers et dossiers
    set $maintenance_flag /var/www/maintenance-pages/maintenance.flag;
    set $maintenance_page /var/www/maintenance-pages/maintenance.html;
    set $app_root /var/www/lodgic-website;
    
    # Logs
    access_log /var/log/nginx/lodgic-dev.com.access.log;
    error_log /var/log/nginx/lodgic-dev.com.error.log;
    
    # Gestion des fichiers statiques avec cache
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Vérifier si la maintenance est active
        if (-f $maintenance_flag) {
            return 503;
        }
        
        root $app_root;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            application/javascript
            application/xml+rss
            application/json
            image/svg+xml;
    }
    
    # Gestion spéciale pour les assets Next.js
    location /_next/static/ {
        if (-f $maintenance_flag) {
            return 503;
        }
        
        root $app_root;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Favicon et robots.txt (toujours accessibles)
    location = /favicon.ico {
        root $app_root;
        expires 1y;
        add_header Cache-Control "public";
        log_not_found off;
    }
    
    location = /robots.txt {
        root $app_root;
        expires 1d;
        add_header Cache-Control "public";
        log_not_found off;
    }
    
    # Sitemap (toujours accessible)
    location = /sitemap.xml {
        root $app_root;
        expires 1h;
        add_header Cache-Control "public";
    }
    
    # API de santé pour vérifier si le site est en maintenance
    location = /health {
        access_log off;
        if (-f $maintenance_flag) {
            return 503;
        }
        return 200 "OK";
    }
    
    # Endpoint pour activer/désactiver la maintenance (IP restreinte)
    location /maintenance-toggle {
        # Limiter l'accès à certaines IPs (remplacer par vos IPs)
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Simple script pour toggle la maintenance
        if ($arg_action = "enable") {
            return 200 "Maintenance enabled - create flag file manually";
        }
        if ($arg_action = "disable") {
            return 200 "Maintenance disabled - remove flag file manually";
        }
        
        # Vérifier le statut
        if (-f $maintenance_flag) {
            return 200 "Maintenance is ACTIVE";
        }
        return 200 "Maintenance is INACTIVE";
    }
    
    # Optimisations SSL
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozTLS:10m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # Autres headers de sécurité
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Chemins des fichiers et dossiers
    set $maintenance_flag /var/www/maintenance-pages/maintenance.flag;
    set $maintenance_page /var/www/maintenance-pages/maintenance.html;
    set $app_root /var/www/lodgic-website;
    
    # Logs
    access_log /var/log/nginx/lodgic.dev.access.log;
    error_log /var/log/nginx/lodgic.dev.error.log;
    
    # Gestion des fichiers statiques avec cache
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Vérifier si la maintenance est active
        if (-f $maintenance_flag) {
            return 503;
        }
        
        root $app_root;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            application/javascript
            application/xml+rss
            application/json
            image/svg+xml;
    }
    
    # Gestion spéciale pour les assets Next.js
    location /_next/static/ {
        if (-f $maintenance_flag) {
            return 503;
        }
        
        root $app_root;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Favicon et robots.txt (toujours accessibles)
    location = /favicon.ico {
        root $app_root;
        expires 1y;
        add_header Cache-Control "public";
        log_not_found off;
    }
    
    location = /robots.txt {
        root $app_root;
        expires 1d;
        add_header Cache-Control "public";
        log_not_found off;
    }
    
    # Sitemap (toujours accessible)
    location = /sitemap.xml {
        root $app_root;
        expires 1h;
        add_header Cache-Control "public";
    }
    
    # API de santé pour vérifier si le site est en maintenance
    location = /health {
        access_log off;
        if (-f $maintenance_flag) {
            return 503;
        }
        return 200 "OK";
    }
    
    # Endpoint pour activer/désactiver la maintenance (IP restreinte)
    location /maintenance-toggle {
        # Limiter l'accès à certaines IPs (remplacer par vos IPs)
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Script pour toggle la maintenance
        content_by_lua_block {
            local maintenance_flag = "/var/www/maintenance-pages/maintenance.flag"
            local action = ngx.var.arg_action
            
            if action == "enable" then
                local file = io.open(maintenance_flag, "w")
                if file then
                    file:write(os.date())
                    file:close()
                    ngx.say("Maintenance enabled")
                else
                    ngx.status = 500
                    ngx.say("Error: Could not create maintenance flag")
                end
            elseif action == "disable" then
                os.remove(maintenance_flag)
                ngx.say("Maintenance disabled")
            else
                local file = io.open(maintenance_flag, "r")
                if file then
                    file:close()
                    ngx.say("Maintenance is ACTIVE")
                else
                    ngx.say("Maintenance is INACTIVE")
                end
            end
        }
    }
    
    # Configuration principale - vérifier la maintenance en premier
    location / {
        # Vérifier si le fichier de maintenance existe
        if (-f $maintenance_flag) {
            return 503;
        }
        
        # Proxy vers l'application Next.js
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer sizes
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # Page d'erreur personnalisée pour la maintenance (503)
    error_page 503 @maintenance;
    
    location @maintenance {
        # Headers pour indiquer que c'est temporaire
        add_header Retry-After 300 always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        
        # Servir la page de maintenance
        root /var/www/maintenance-pages;
        try_files /maintenance.html =503;
        
        # Log des accès pendant la maintenance
        access_log /var/log/nginx/maintenance.access.log;
    }
    
    # Gestion des autres codes d'erreur
    error_page 404 /404.html;
    error_page 500 502 504 /50x.html;
    
    location = /404.html {
        root $app_root;
        internal;
    }
    
    location = /50x.html {
        root $app_root;
        internal;
    }
}

# Configuration pour le staging/développement (optionnel)
server {
    listen 80;
    server_name staging.lodgic.dev dev.lodgic.dev;
    
    set $maintenance_flag /var/www/maintenance-pages/staging.maintenance.flag;
    set $maintenance_page /var/www/maintenance-pages/maintenance.html;
    set $app_root /var/www/lodgic-website-staging;
    
    location / {
        if (-f $maintenance_flag) {
            return 503;
        }
        
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    error_page 503 @maintenance;
    
    location @maintenance {
        add_header Retry-After 300 always;
        root /var/www/maintenance-pages;
        try_files /maintenance.html =503;
    }
} 